{"version":3,"sources":["logo.svg","Header/Header.js","MemeGenerator/MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","src","id","MemeGenerator","handleClick","event","preventDefault","num","Math","floor","random","state","allMemeImages","length","console","log","setState","randomImage","url","topText","bottomText","handleChange","bind","this","target","name","value","fetch","then","response","json","memes","data","className","onSubmit","type","placeholder","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,oICE3C,SAASC,IAEP,OACE,gCACA,yBAAKC,IAAI,mEACT,6CACA,uBAAGC,GAAG,SAAN,uB,8CCLEC,E,kDAEL,aAAc,IAAD,8BACX,gBAkBFC,YAAa,SAACC,GAEZA,EAAMC,iBACN,IAAMC,EAAMC,KAAKC,MAAMD,KAAKE,SAAS,EAAKC,MAAMC,cAAcC,QAC/DC,QAAQC,IAAIR,GACX,EAAKS,SAAS,CAACC,YAAY,EAAKN,MAAMC,cAAcL,GAAKW,OAtBzD,EAAKP,MAAM,CACTQ,QAAQ,GACRC,WAAW,GACXH,YAAY,gCACZL,cAAc,IAGlB,EAAKS,aAAc,EAAKA,aAAaC,KAAlB,gBATN,E,yDAaAjB,GAEXkB,KAAKP,SAAL,eAAiBX,EAAMmB,OAAOC,KAAOpB,EAAMmB,OAAOE,U,0CAYhC,IAAD,OAEjBZ,QAAQC,IAAI,gDACZY,MAAM,qCACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAC,GAAW,IAERE,EAASF,EAASG,KAAlBD,MAEP,EAAKf,SAAS,CAACJ,cAAcmB,S,+BAM9B,OAEE,6BAEE,0BAAME,UAAU,YAAYC,SAAUX,KAAKnB,aAEzC,2BAAO+B,KAAK,OAAOV,KAAK,UAAUW,YAAY,WAAWV,MAAOH,KAAKZ,MAAMQ,QAASkB,SAAUd,KAAKF,eACnG,2BAAOc,KAAK,OAAOV,KAAK,aAAaW,YAAY,cAAcV,MAAOH,KAAKZ,MAAMS,WAAYiB,SAAUd,KAAKF,eAC5G,6CAIF,yBAAKY,UAAU,QACf,yBAAKhC,IAAKsB,KAAKZ,MAAMM,cACrB,wBAAIgB,UAAU,OACbV,KAAKZ,MAAMQ,SAEZ,wBAAIc,UAAU,UACXV,KAAKZ,MAAMS,kB,GA9DMkB,IAAMC,WCKlC,SAASC,IACP,OAEE,6BACA,kBAACxC,EAAD,MACA,kBAAC,EAAD,OCDgByC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.ee7348a6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\nfunction Header(){\r\n\r\n  return(\r\n    <header>\r\n    <img src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\"/>\r\n    <p>Meme Generator</p>\r\n    <p id='paras'>This is my element</p>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport {Header}\r\n","\r\nimport React from 'react'\r\n\r\nclass MemeGenerator extends React.Component{\r\n\r\n constructor(){\r\n   super()\r\n   this.state={\r\n     topText:\"\",\r\n     bottomText:\"\",\r\n     randomImage:\"http://i.imgflip.com/1bij.jpg\",\r\n     allMemeImages:[]\r\n   }\r\n\r\n this.handleChange= this.handleChange.bind(this)\r\n\r\n }\r\n\r\n handleChange(event){\r\n\r\n   this.setState({ [event.target.name]: event.target.value })\r\n\r\n }\r\n\r\n handleClick =(event)=>{\r\n\r\n   event.preventDefault()\r\n   const num = Math.floor(Math.random()*this.state.allMemeImages.length);\r\n  console.log(num);\r\n   this.setState({randomImage:this.state.allMemeImages[num].url})\r\n }\r\n\r\n componentDidMount(){\r\n\r\n   console.log(\"mount***************************************\");\r\n   fetch(\"https://api.imgflip.com/get_memes\")\r\n   .then(response=> response.json())\r\n   .then(response=>{\r\n\r\n     const {memes} = response.data;\r\n\r\n     this.setState({allMemeImages:memes})\r\n\r\n   })\r\n }\r\n  render(){\r\n\r\n    return (\r\n\r\n      <div>\r\n\r\n        <form className=\"meme-form\" onSubmit={this.handleClick}>\r\n\r\n          <input type=\"text\" name=\"topText\" placeholder=\"Top Text\" value={this.state.topText} onChange={this.handleChange}/>\r\n          <input type=\"text\" name=\"bottomText\" placeholder=\"Bottom Text\" value={this.state.bottomText} onChange={this.handleChange}/>\r\n          <button>Generate</button>\r\n\r\n        </form>\r\n\r\n        <div className=\"meme\">\r\n        <img src={this.state.randomImage}/>\r\n        <h2 className=\"top\">\r\n        {this.state.topText}\r\n        </h2>\r\n        <h2 className=\"bottom\">\r\n          {this.state.bottomText}\r\n        </h2>\r\n        </div>\r\n       </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport {MemeGenerator}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './styles.css'\nimport {Header} from './Header/Header.js'\n\nimport {MemeGenerator} from './MemeGenerator/MemeGenerator.js'\n\nfunction App() {\n  return (\n\n    <div>\n    <Header/>\n    <MemeGenerator/>\n    </div>\n\n\n  );\n}\n\n//exporting in the form of named modules\n\nexport  {App};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// importing react app as a named module \nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}